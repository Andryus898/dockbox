version: '2'

services:

###
### APLICACIONES
###
  aplicaciones:
    image: tianon/true
    volumes:
      # Proyectos al mismo nivel de dockbox
      - ${APPLICATION}:/var/www


###
### SERVIDOR UBUNTU 16.04
###
  servidor:
    build:
      context: ./server
      dockerfile: "Dockerfile-${PHP_VERSION}"
      args:
        - INSTALL_XDEBUG=${WORKSPACE_INSTALL_XDEBUG}
        - INSTALL_SOAP=${WORKSPACE_INSTALL_SOAP}
        - INSTALL_MONGO=${WORKSPACE_INSTALL_MONGO}
        - INSTALL_MSSQL=${WORKSPACE_INSTALL_MSSQL}
        - INSTALL_NODE=${WORKSPACE_INSTALL_NODE}
        - INSTALL_YARN=${WORKSPACE_INSTALL_YARN}
        - INSTALL_SASS=${WORKSPACE_INSTALL_SASS}
        - INSTALL_V8JS_EXTENSION=${WORKSPACE_INSTALL_INSTALL_V8JS_EXTENSION}
        - COMPOSER_GLOBAL_INSTALL=${WORKSPACE_COMPOSER_GLOBAL_INSTALL}
        - INSTALL_WORKSPACE_SSH=${WORKSPACE_INSTALL_WORKSPACE_SSH}
        - INSTALL_LARAVEL_ENVOY=${WORKSPACE_INSTALL_LARAVEL_ENVOY}
        - INSTALL_LARAVEL_INSTALLER=${WORKSPACE_INSTALL_LARAVEL_INSTALLER}
        - INSTALL_DEPLOYER=${WORKSPACE_INSTALL_DEPLOYER}
        - INSTALL_MC=${WORKSPACE_INSTALL_MC}
        - INSTALL_SYMFONY=${WORKSPACE_INSTALL_SYMFONY}
        - INSTALL_PYTHON=${WORKSPACE_INSTALL_PYTHON}
        - INSTALL_IMAGE_OPTIMIZERS=${WORKSPACE_INSTALL_IMAGE_OPTIMIZERS}
        - INSTALL_ZMQ=${WORKSPACE_INSTALL_ZMQ}
        - PUID=${WORKSPACE_PUID}
        - PGID=${WORKSPACE_PGID}
        - NODE_VERSION=${WORKSPACE_NODE_VERSION}
        - YARN_VERSION=${WORKSPACE_YARN_VERSION}
        - TZ=${WORKSPACE_TIMEZONE}
    volumes_from:
      - aplicaciones
    extra_hosts:
      # IMPORTANT: Replace with your Docker Host IP (will be appended to /etc/hosts)
      # OBTENER CON: docker inspect -f '{{.Name}} - {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker ps -aq)
      - "dockerhost:${DOCKER_HOST_IP}"
    ports:
      - "${WORKSPACE_SSH_PORT}:22"
    tty: true
    networks:
      - frontend
      - backend


###
### PHP
###
  php-fpm:
    build:
      context: ./php-fpm
      dockerfile: "Dockerfile-${PHP_VERSION}"
      args:
        - INSTALL_XDEBUG=${PHP_FPM_INSTALL_XDEBUG}
        - INSTALL_SOAP=${PHP_FPM_INSTALL_SOAP}
        - INSTALL_MONGO=${PHP_FPM_INSTALL_MONGO}
        - INSTALL_MSSQL=${PHP_FPM_INSTALL_MSSQL}
        - INSTALL_ZIP_ARCHIVE=${PHP_FPM_INSTALL_ZIP_ARCHIVE}
        - INSTALL_BCMATH=${PHP_FPM_INSTALL_BCMATH}
        - INSTALL_PHPREDIS=${PHP_FPM_INSTALL_PHPREDIS}
        - INSTALL_MEMCACHED=${PHP_FPM_INSTALL_MEMCACHED}
        - INSTALL_OPCACHE=${PHP_FPM_INSTALL_OPCACHE}
        - INSTALL_EXIF=${PHP_FPM_INSTALL_EXIF}
        - INSTALL_MYSQLI=${PHP_FPM_INSTALL_MYSQLI}
        - INSTALL_TOKENIZER=${PHP_FPM_INSTALL_TOKENIZER}
        - INSTALL_INTL=${PHP_FPM_INSTALL_INTL}
        - INSTALL_GHOSTSCRIPT=${PHP_FPM_INSTALL_GHOSTSCRIPT}
        - INSTALL_LDAP=${PHP_FPM_INSTALL_LDAP}
        - INSTALL_SWOOLE=${PHP_FPM_INSTALL_SWOOLE}
        - INSTALL_IMAGE_OPTIMIZERS=${PHP_FPM_INSTALL_IMAGE_OPTIMIZERS}
        - INSTALL_ZMQ=${PHP_FPM_INSTALL_ZMQ}
    volumes_from:
      - aplicaciones
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
    expose:
      - "9000"
    depends_on:
      - servidor
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    environment:
      - PHP_IDE_CONFIG=${PHP_IDE_CONFIG}
    networks:
      - backend


###
### PHP Worker
###
  php-worker:
    build:
      context: ./php-worker
      dockerfile: "Dockerfile-${PHP_VERSION}"
    volumes_from:
      - aplicaciones
    depends_on:
      - servidor
    extra_hosts:
      - "dockerhost:${DOCKER_HOST_IP}"
    networks:
      - backend


###
### NGINX
###
  nginx:
    build:
      context: ./nginx
      args:
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
    volumes_from:
      - aplicaciones
    volumes:
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
    ports:
      - "${NGINX_HOST_HTTP_PORT}:80"
      - "${NGINX_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend


###
### APACHE
###
  apache2:
    build:
      context: ./apache2
      args:
        - PHP_UPSTREAM_CONTAINER=${APACHE_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${APACHE_PHP_UPSTREAM_PORT}
    volumes_from:
        - aplicaciones
    volumes:
      - ${APACHE_HOST_LOG_PATH}:/var/log/apache2
      - ./apache2/sites:/etc/apache2/sites-available
    ports:
      - "${APACHE_HOST_HTTP_PORT}:80"
      - "${APACHE_HOST_HTTPS_PORT}:443"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend


###
### HHVM
###
  hhvm:
    build: ./hhvm
    volumes_from:
      - aplicaciones
    expose:
      - "9000"
    depends_on:
      - servidor
    networks:
      - frontend
      - backend


###
### MYSQL
###
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_SAVE_PATH}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MYSQL_PORT}:3306"
    user: "1000:50"
    networks:
      - backend


###
### POSTGRESQL
###
  postgres:
    build: ./postgres
    volumes:
      - ${DATA_SAVE_PATH}/postgres/data:/var/lib/postgresql/data
      - ${DATA_SAVE_PATH}/postgres/backup:/var/lib/postgresql/backup
      - ${POSTGRES_LOG_PATH}:/var/log/postgresql
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend


###
### MSSQL
###
  mssql:
    build:
      context: ./mssql
    environment:
      - MSSQL_DATABASE=${MSSQL_DATABASE}
      - SA_PASSWORD=${MSSQL_PASSWORD}
      - ACCEPT_EULA=Y
    volumes:
      - ${DATA_SAVE_PATH}/mssql:/var/opt/mssql
    ports:
      - "${MSSQL_PORT}:1433"
    networks:
      - backend


###
### POSTGRESQL PostGis
###
  postgres-postgis:
    build: ./postgres-postgis
    volumes:
      - ${DATA_SAVE_PATH}/postgres:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend


###
### MARIADB
###
  mariadb:
    build: ./mariadb
    volumes:
      - ${DATA_SAVE_PATH}/mariadb:/var/lib/mysql
      - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - "${MARIADB_PORT}:3306"
    environment:
      - MYSQL_DATABASE=${MARIADB_DATABASE}
      - MYSQL_USER=${MARIADB_USER}
      - MYSQL_PASSWORD=${MARIADB_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    networks:
      - backend


###
### MONGODB
###
  mongo:
    build: ./mongo
    ports:
      - "27017:27017"
    volumes:
      - ${DATA_SAVE_PATH}/mongo:/data/db
      - ${DATA_SAVE_PATH}/mongo/configdb:/data/configdb
    networks:
      - backend


###
### PHPMYADMIN
###
  phpmyadmin:
    build: ./phpmyadmin
    environment:
      - PMA_ARBITRARY=1
      - MYSQL_USER=${PMA_USER}
      - MYSQL_PASSWORD=${PMA_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
    ports:
      - "${PMA_PORT}:80"
    depends_on:
      - "${PMA_DB_ENGINE}"
    networks:
      - frontend
      - backend


###
### PGADMIN
###
  pgadmin:
    build: ./pgadmin
    ports:
      - "5050:5050"
    volumes:
      - ${DATA_SAVE_PATH}/pgadmin-backup:/var/lib/pgadmin4/data/storage/pgadmin4
    depends_on:
      - postgres
    networks:
      - frontend
      - backend


###
### REDIS
###
  redis:
    build: ./redis
    volumes:
      - ${DATA_SAVE_PATH}/redis:/data
    ports:
      - "6379:6379"
    networks:
      - backend


###
### MEMCACHED
###
  memcached:
    build: ./memcached
    volumes:
      - ${DATA_SAVE_PATH}/memcached:/var/lib/memcached
    ports:
      - "${MEMCACHED_HOST_PORT}:11211"
    depends_on:
      - php-fpm
    networks:
      - backend


###
### ELASTICSEARCH
###
  elasticsearch:
    build: ./elasticsearch
    volumes:
      - ${DATA_SAVE_PATH}/elasticsearch/data:/usr/share/elasticsearch/data
      - ${DATA_SAVE_PATH}/elasticsearch/plugins:/usr/share/elasticsearch/plugins
    environment:
      - cluster.name=dockbox-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 512m
    ports:
      - "${ELASTICSEARCH_HOST_HTTP_PORT}:9200"
      - "${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300"
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend


###
### KIBANA
###
  kibana:
    build: ./kibana
    ports:
      - "${KIBANA_HTTP_PORT}:5601"
    depends_on:
      - elasticsearch
    networks:
      - frontend
      - backend


###
### BEANSTALKD
###
  beanstalkd:
    build: ./beanstalkd
    ports:
      - "${BEANSTALKD_HOST_PORT}:11300"
    privileged: true
    depends_on:
      - php-fpm
    networks:
      - backend


###
### BEANSTALKD CONSOLE
###
  beanstalkd-console:
    build: ./beanstalkd-console
    ports:
      - "2080:2080"
    depends_on:
      - beanstalkd
    networks:
      - backend


###
### JENKINS
###
  jenkins:
    build: ./jenkins
    environment:
      JAVA_OPTS: "-Djava.awt.headless=true"
    ports:
      - "${JENKINS_HOST_SLAVE_AGENT_PORT}:50000"
      - "${JENKINS_HOST_HTTP_PORT}:8080"
      - "${JENKINS_HOST_HTTPS_PORT}:8443"
    privileged: true
    volumes:
      - ${DATA_SAVE_PATH}/jenkins/jenkins_home:/var/jenkins_home
      - ${DATA_SAVE_PATH}/jenkins/docker.sock:/var/run/docker.sock
      - ${DATA_SAVE_PATH}/jenkins/docker:/usr/bin/docker
    networks:
      - frontend
      - backend


###
### RABBITMQ
###
  rabbitmq:
    build: ./rabbitmq
    ports:
      - "${RABBITMQ_NODE_HOST_PORT}:5672"
      - "${RABBITMQ_MANAGEMENT_HTTP_HOST_PORT}:15672"
      - "${RABBITMQ_MANAGEMENT_HTTPS_HOST_PORT}:15671"
    privileged: true
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    depends_on:
      - php-fpm
    networks:
      - backend


###
### JIRA
###
  jira:
    build: ./jira
    volumes:
      - ${DATA_SAVE_PATH}/jira/jira-webapp:/var/atlassian/jira
      - ${DATA_SAVE_PATH}/jira/logs:/opt/atlassian/jira/logs
    ports:
      - "${JIRA_PORT}:8080"
    networks:
      - frontend


###
### SELENIUM
###
  selenium:
    build: ./selenium
    ports:
      - "${SELENIUM_PORT}:4444"
    volumes:
      - /dev/shm:/dev/shm
    networks:
      - frontend


###
### NETWORK
###
networks:
  frontend:
    driver: "bridge"
  backend:
    driver: "bridge"

volumes:
  mysql:
    driver: "local"
  postgres:
    driver: "local"
  mssql:
    driver: "local"
  memcached:
    driver: "local"
  redis:
    driver: "local"
  mariadb:
    driver: "local"
  mongo:
    driver: "local"
  phpmyadmin:
    driver: "local"
  elasticsearch-data:
    driver: "local"
  elasticsearch-plugins:
    driver: "local"
  sessions:    ## nothing is connected to this (- ./data/sessions:/sessions)
    driver: "local"
  jenkins:
    driver: "local"
  jira:
    driver: "local"